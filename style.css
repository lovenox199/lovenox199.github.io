/* Universal reset and border-box */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-top: 20px; /* Use padding instead of margin for body */
    min-height: 100vh; /* Ensure body takes at least full viewport height */
}

h1 {
    margin-bottom: 10px;
    font-size: 5vmin; /* Responsive font size */
}

#message-area {
    height: 3vh; /* Relative height */
    margin-bottom: 1vh; /* Relative margin */
    font-weight: bold;
    font-size: 2vmin; /* Responsive font size */
    color: green; /* Default color */
    display: flex; /* Center text vertically */
    align-items: center;
    justify-content: center;
}

#sudoku-board {
    /* Use viewport units for responsive size, ensuring it's square */
    width: 80vmin;
    height: 80vmin;
    /* Set maximum size to prevent it becoming huge on large screens */
    max-width: 500px;
    max-height: 500px;
    /* aspect-ratio: 1 / 1; /* Alternative way to enforce squareness */

    border: 2px solid black;
    margin-bottom: 20px;

    /* Define the grid using fractional units */
    display: grid;
    grid-template-columns: repeat(9, 1fr); /* 9 equal columns */
    grid-template-rows: repeat(9, 1fr); /* 9 equal rows */

    /* Prevent grid blowing out container if content is too large (e.g. borders) */
     overflow: hidden;
}

.cell {
    /* No explicit width/height needed - cells will fill the '1fr' tracks */
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    /* Responsive font size based on viewport */
    font-size: 3vmin;
    /* Limit max font size */
     max-font-size: 24px;
    cursor: default;
    overflow: hidden; /* Hide number if it overflows cell */
    text-align: center;
}

.cell.editable {
    cursor: pointer;
    background-color: #f0f8ff;
}

.cell.selected {
    background-color: #add8e6;
}

.cell.prefilled {
    font-weight: bold;
    background-color: #eee;
}

.cell.invalid {
    color: white;
    background-color: #f77;
    animation: fadeOutInvalid 0.5s forwards;
}

@keyframes fadeOutInvalid {
  to {
    /* Fade back to the cell's normal state (editable or prefilled) */
    color: inherit; /* Needs JS intervention to know original background */
     /* Simple fade back to default editable color: */
     background-color: #f0f8ff;
     /* JS should ideally restore correct background (editable/prefilled) */
  }
}

/* Thicker borders for 3x3 subgrids - draws inside the cell */
.thick-border-bottom {
     border-bottom: 2px solid black;
}
.thick-border-right {
     border-right: 2px solid black;
}


.controls {
    margin-top: 1vh; /* Relative margin */
}

.controls button {
    padding: 1.5vmin 2.5vmin; /* Responsive padding */
    margin: 0 1vmin; /* Responsive margin */
    font-size: 2vmin; /* Responsive font size */
    max-font-size: 16px; /* Limit max font size */
    cursor: pointer;
}

.cell.highlight {
    background-color: #d3e4ff;
}

/* Difficulty buttons */
.difficulty-container {
    display: flex;
    justify-content: center;
    margin-bottom: 15px;
}

.difficulty-button {
    padding: 8px 16px;
    margin: 0 5px;
    border: 1px solid #ccc;
    background-color: #f5f5f5;
    cursor: pointer;
    border-radius: 4px;
    font-weight: bold;
    transition: all 0.3s ease;
}

.difficulty-button:hover {
    background-color: #e0e0e0;
}

.difficulty-button.active {
    background-color: #4CAF50;
    color: white;
    border-color: #4CAF50;
}

/* Highlighting related cells */
.cell.highlight {
    background-color: #d3e4ff;
}
